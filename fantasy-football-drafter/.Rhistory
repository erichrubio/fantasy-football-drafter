install.packages('xml')
install.packages('XML')
library('XML')
qb_espn ("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
install.packages('Shiny')
install.packages('shiny')
install.packages('data.table')
install.packages('DT')
library(shiny)
library(data.table)
library(DT)
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
's' + 'e'
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
null
Null
NULL
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
runApp('Documents/fantasy-football/ff-r-project')
g.dt.pros <- fread("projections_2022_season.csv")
# Packages
require(tidyverse)
# Packages
require(tidyverse)
require(lubridate)
require(zoo)
require(readxl)
# Define UDC-AP node mapping
udc.node <- tibble(udc = c("PGAE", "SCE", "SDGE", "Anaheim", "Azusa", "Banning", "Pasadena", "Riverside", "Vernon"),
node = c("DLAP_PGAE-APND", "DLAP_SCE-APND", "DLAP_SDGE-APND", "TH_SP15_GEN-APND", "TH_SP15_GEN-APND", "TH_SP15_GEN-APND", "TH_SP15_GEN-APND", "TH_SP15_GEN-APND", "TH_SP15_GEN-APND"))
# Read monthly capacity estimates by duration and Path 15 zone
cap.est <- read_excel("/Users/erichrubio/Downloads/Storage Provider Monthly Estimates.xlsx") %>%
pivot_longer(May:October, names_to = "month", values_to = "capacity.mw", values_drop_na = TRUE) %>%
inner_join(udc.node)
# Create data frame to download price data
price.dwnld <- cap.est %>%
select(node) %>%
unique() %>%
mutate(data = vector(mode = "list", length = length(unique(udc.node$node))))
# Hourly DAM Prices
for (i in 1:nrow(price.dwnld)) {
getURL <- paste0("http://oasis.caiso.com/oasisapi/SingleZip?queryname=PRC_LMP&startdatetime=",
strftime(today(), "%Y%m%d"),
"T07:00-0000&enddatetime=",
strftime(today()+2, "%Y%m%d"),
"T07:00-0000&version=1&market_run_id=DAM&node=", price.dwnld$node[i], "&resultformat=6")
# Create and populate temporary file
temp <- tempfile()
if (i > 1) {Sys.sleep(5)}
tryCatch(download.file(url = getURL, temp), error = function(e) {e})
price.dwnld$data[[i]] <- read_csv(unzip(temp), col_types = cols(
INTERVALSTARTTIME_GMT = col_skip(),
INTERVALENDTIME_GMT = col_skip(),
OPR_DT = col_date(format = ""),
OPR_HR = col_integer(),
OPR_INTERVAL = col_skip(),
NODE_ID_XML = col_skip(),
NODE_ID = col_skip(),
NODE = col_character(),
MARKET_RUN_ID = col_skip(),
LMP_TYPE = col_character(),
XML_DATA_ITEM = col_skip(),
PNODE_RESMRID = col_skip(),
GRP_TYPE = col_skip(),
POS = col_skip(),
MW = col_double(),
GROUP = col_skip()
)
)
# Clean up temporary files
unlink(temp)
rm(getURL)
file.remove(dir(pattern = ".*_PRC_LMP_DAM_.*"))
}
lmp
# Create dataset to identify events and expected dispatch
# Combine DAM price datasets
dsgs.event <- do.call(bind_rows, price.dwnld$data) %>%
# Rename for working in R
rename_all(~str_replace_all(., "_", ".") %>% tolower()) %>%
rename(lmp.dam = mw) %>%
# Exclude LMP components and filter to program possible hours
filter(lmp.type == "LMP" & opr.hr > 16 & opr.hr <= 21) %>%
mutate(month = month(opr.dt, label = TRUE, abbr = FALSE)) %>%
# Remove "LMP Type" variable after filtering to single value and node name after replacing with zone name
select(-lmp.type) %>%
# Identify all prices meeting the price trigger, including possible hours falling in between
group_by(node, opr.dt) %>%
arrange(opr.dt, node, opr.hr) %>%
mutate(price.trigger = cummax(lmp.dam >= trigger) & rev(cummax(rev(lmp.dam))) >= trigger) %>%
# Combine with capacity nomination/estimation data
inner_join(cap.est) %>%
# Rearrange columns and reorder data for convenience
select(opr.dt, udc, provider, opr.hr, everything()) %>%
# Define top hours
group_by(opr.dt, udc, provider, duration) %>%
arrange(opr.dt, udc, provider, duration, opr.hr) %>%
mutate(window.duration = sum(price.trigger),
lmp.roll = rollmean(x = lmp.dam, k = pmax(pmin(unique(duration), unique(window.duration)), 1), align = "right", fill = NA),
top.hrs = index(opr.hr) > (which.max(lmp.roll) - pmin(unique(duration), unique(window.duration)) ) & index(opr.hr) <= which.max(lmp.roll),
event.duration = pmin(window.duration, duration),
discharge.mw = capacity.mw*price.trigger*top.hrs)
# Define trigger price (Set to 200, can be lowered for testing)
trigger <- 200
# Create dataset to identify events and expected dispatch
# Combine DAM price datasets
dsgs.event <- do.call(bind_rows, price.dwnld$data) %>%
# Rename for working in R
rename_all(~str_replace_all(., "_", ".") %>% tolower()) %>%
rename(lmp.dam = mw) %>%
# Exclude LMP components and filter to program possible hours
filter(lmp.type == "LMP" & opr.hr > 16 & opr.hr <= 21) %>%
mutate(month = month(opr.dt, label = TRUE, abbr = FALSE)) %>%
# Remove "LMP Type" variable after filtering to single value and node name after replacing with zone name
select(-lmp.type) %>%
# Identify all prices meeting the price trigger, including possible hours falling in between
group_by(node, opr.dt) %>%
arrange(opr.dt, node, opr.hr) %>%
mutate(price.trigger = cummax(lmp.dam >= trigger) & rev(cummax(rev(lmp.dam))) >= trigger) %>%
# Combine with capacity nomination/estimation data
inner_join(cap.est) %>%
# Rearrange columns and reorder data for convenience
select(opr.dt, udc, provider, opr.hr, everything()) %>%
# Define top hours
group_by(opr.dt, udc, provider, duration) %>%
arrange(opr.dt, udc, provider, duration, opr.hr) %>%
mutate(window.duration = sum(price.trigger),
lmp.roll = rollmean(x = lmp.dam, k = pmax(pmin(unique(duration), unique(window.duration)), 1), align = "right", fill = NA),
top.hrs = index(opr.hr) > (which.max(lmp.roll) - pmin(unique(duration), unique(window.duration)) ) & index(opr.hr) <= which.max(lmp.roll),
event.duration = pmin(window.duration, duration),
discharge.mw = capacity.mw*price.trigger*top.hrs)
dsgs.event
dsgs.event
colnames(dsgs.event)
dsgs.event <- do.call(bind_rows, price.dwnld$data) %>%
# Rename for working in R
rename_all(~str_replace_all(., "_", ".") %>% tolower()) %>%
rename(lmp.dam = mw) %>%
# Exclude LMP components and filter to program possible hours
dsgs.event <- do.call(bind_rows, price.dwnld$data) %>%
# Rename for working in R
rename_all(~str_replace_all(., "_", ".") %>% tolower()) %>%
rename(lmp.dam = mw)
dsgs.event <- do.call(bind_rows, price.dwnld$data) %>%
# Rename for working in R
rename_all(~str_replace_all(., "_", ".") %>% tolower()) %>%
rename(lmp.dam = mw)
dsgs.event
max(dsgs.event$opr.hr)
min(dsgs.event$opr.hr)
# Create dataset to identify events and expected dispatch
# Combine DAM price datasets
dsgs.event <- do.call(bind_rows, price.dwnld$data) %>%
# Rename for working in R
rename_all(~str_replace_all(., "_", ".") %>% tolower()) %>%
rename(lmp.dam = mw) %>%
# Exclude LMP components and filter to program possible hours
filter(lmp.type == "LMP" & opr.hr > 16 & opr.hr <= 21) %>%
mutate(month = month(opr.dt, label = TRUE, abbr = FALSE)) %>%
# Remove "LMP Type" variable after filtering to single value and node name after replacing with zone name
select(-lmp.type) %>%
# Identify all prices meeting the price trigger, including possible hours falling in between
group_by(node, opr.dt) %>%
arrange(opr.dt, node, opr.hr) %>%
mutate(price.trigger = cummax(lmp.dam >= trigger) & rev(cummax(rev(lmp.dam))) >= trigger) %>%
# Combine with capacity nomination/estimation data
inner_join(cap.est) %>%
# Rearrange columns and reorder data for convenience
select(opr.dt, udc, provider, opr.hr, everything()) %>%
# Define top hours
group_by(opr.dt, udc, provider, duration) %>%
arrange(opr.dt, udc, provider, duration, opr.hr) %>%
mutate(window.duration = sum(price.trigger),
lmp.roll = rollmean(x = lmp.dam, k = pmax(pmin(unique(duration), unique(window.duration)), 1), align = "right", fill = NA),
top.hrs = index(opr.hr) > (which.max(lmp.roll) - pmin(unique(duration), unique(window.duration)) ) & index(opr.hr) <= which.max(lmp.roll),
event.duration = pmin(window.duration, duration),
discharge.mw = capacity.mw*price.trigger*top.hrs)
shiny::runApp('Documents/fantasy-football/fantasy-football-drafter')
runApp('Documents/fantasy-football/fantasy-football-drafter')
runApp('Documents/fantasy-football/fantasy-football-drafter')
runApp('Documents/fantasy-football/fantasy-football-drafter')
runApp('Documents/fantasy-football/fantasy-football-drafter')
round
define(round)
runApp('Documents/fantasy-football/fantasy-football-drafter')
runApp('Documents/fantasy-football/fantasy-football-drafter')
runApp('Documents/fantasy-football/fantasy-football-drafter')
library(shiny)
library(data.table)
library(DT)
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
g.vec.positions <- c('QB', 'RB', 'WR', 'TE', 'K', 'DST')
g.initial.players.to.drop = c()
# csv_name = 'jelly_projections_2023_wk0.csv'
csv_name = 'bad_hombres_projections_2023_wk0.csv'
g.dt.pros <- fread(paste0(getwd(), "/", csv_name))
library(shiny)
library(data.table)
library(DT)
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
g.vec.positions <- c('QB', 'RB', 'WR', 'TE', 'K', 'DST')
g.initial.players.to.drop = c()
# csv_name = 'jelly_projections_2023_wk0.csv'
csv_name = 'bad_hombres_projections_2023_wk0.csv'
g.dt.pros <- fread(paste0(getwd(), "/", csv_name))
pwd()
getwd()
getwd()
shiny::runApp('Documents/fantasy-football/fantasy-football-drafter')
library(shiny)
library(data.table)
library(DT)
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
g.vec.positions <- c('QB', 'RB', 'WR', 'TE', 'K', 'DST')
g.initial.players.to.drop = c()
csv_dir = (
'/Users/erichrubio/Documents/fantasy-football/fantasy-football-drafter/'
)
# csv_name = 'jelly_projections_2023_wk0.csv'
csv_name = 'bad_hombres_projections_2023_wk0.csv'
g.dt.pros <- fread(paste0(csv_dir, csv_name))
g.dt.pros
runApp('Documents/fantasy-football/fantasy-football-drafter')
library(shiny)
library(data.table)
library(DT)
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
g.vec.positions <- c('QB', 'RB', 'WR', 'TE', 'K', 'DST')
g.initial.players.to.drop = c()
csv_dir = (
'/Users/erichrubio/Documents/fantasy-football/fantasy-football-drafter/'
)
# csv_name = 'jelly_projections_2023_wk0.csv'
csv_name = 'bad_hombres_projections_2023_wk0.csv'
g.dt.pros <- fread(paste0(csv_dir, csv_name))
g.dt.pros[, id := .I]
g.dt.pros[, `:=` (
tier = NULL,
ecr = NULL,
sd_ecr = NULL,
salary = NULL,
ppd = NULL
)]
g.dt.pros
g.r.dt.pros <- copy(g.dt.pros)
# Formats columns.
g.r.dt.pros <- g.r.dt.pros[, .(
Rank = rank,
Player = player,
Pos = position,
Team = team,
Points = round(points),
VoR = round(points_vor),
SD_Pts = round(sd_pts),
Floor = round(floor),
Ceiling = round(ceiling),
Pos_Rank = position_rank,
F_VoR = round(floor_vor),
C_VoR = round(ceiling_vor),
ADP = round(adp, 1),
Uncertainty = uncertainty,
id
)]
# Adds 'Drop' button.
g.r.dt.pros[, Drop := shinyInput(
actionButton,
NROW(g.dt.pros),
'button_',
label = "Drop",
onclick = 'Shiny.onInputChange(\"select_button\",  this.id)'
),]
n.col <- NCOL(g.r.dt.pros)
setcolorder(g.r.dt.pros, c(n.col, 1:(n.col-1)))
g.dt.pros
g.r.dt.pros
setwd("~/Documents/fantasy-football/fantasy-football-drafter")
library(shiny)
library(data.table)
library(DT)
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
g.vec.positions <- c('QB', 'RB', 'WR', 'TE', 'K', 'DST')
g.initial.players.to.drop = c()
csv_dir = (
'/Users/erichrubio/Documents/fantasy-football/fantasy-football-drafter/'
)
# csv_name = 'jelly_projections_2023_wk0.csv'
csv_name = 'bad_hombres_projections_2023_wk0.csv'
g.dt.pros <- fread(paste0(csv_dir, csv_name))
g.dt.pros
g.dt.pros[, id := .I]
g.dt.pros[, `:=` (
tier = NULL,
ecr = NULL,
sd_ecr = NULL,
salary = NULL,
ppd = NULL
)]
g.dt.pros
g.r.dt.pros <- copy(g.dt.pros)
# Formats columns.
g.r.dt.pros <- g.r.dt.pros[, .(
Rank = rank,
Player = player,
Pos = position,
Team = team,
Points = round(points),
VoR = round(points_vor),
SD_Pts = round(sd_pts),
Floor = round(floor),
Ceiling = round(ceiling),
Pos_Rank = position_rank,
F_VoR = round(floor_vor),
C_VoR = round(ceiling_vor),
ADP = round(adp, 1),
Uncertainty = uncertainty,
id
)]
# Adds 'Drop' button.
g.r.dt.pros[, Drop := shinyInput(
actionButton,
NROW(g.dt.pros),
'button_',
label = "Drop",
onclick = 'Shiny.onInputChange(\"select_button\",  this.id)'
),]
n.col <- NCOL(g.r.dt.pros)
setcolorder(g.r.dt.pros, c(n.col, 1:(n.col-1)))
g.r.dt.pros
runApp()
shiny::runApp()
runApp()
~/Documents/fantasy-football/fantasy-football-drafter/ui.R
runApp()
library(shiny)
library(data.table)
library(DT)
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
g.vec.positions <- c('QB', 'RB', 'WR', 'TE', 'K', 'DST')
g.initial.players.to.drop = c()
csv_dir = (
'/Users/erichrubio/Documents/fantasy-football/fantasy-football-drafter/'
)
# csv_name = 'jelly_projections_2023_wk0.csv'
csv_name = 'bad_hombres_projections_2023_wk0.csv'
g.dt.pros <- fread(paste0(csv_dir, csv_name))
g.dt.pros[, id := .I]
g.dt.pros[, `:=` (
tier = NULL,
ecr = NULL,
sd_ecr = NULL,
salary = NULL,
ppd = NULL
)]
g.dt.pros
g.r.dt.pros <- copy(g.dt.pros)
# Formats columns.
g.r.dt.pros <- g.r.dt.pros[, .(
Rank = rank,
Player = player,
Pos = position,
Team = team,
Points = round(points),
VoR = round(points_vor),
SD_Pts = round(sd_pts),
Floor = round(floor),
Ceiling = round(ceiling),
Pos_Rank = position_rank,
F_VoR = round(floor_vor),
C_VoR = round(ceiling_vor),
ADP = round(adp, 1),
Uncertainty = uncertainty,
id
)]
# Adds 'Drop' button.
g.r.dt.pros[, Drop := shinyInput(
actionButton,
NROW(g.dt.pros),
'button_',
label = "Drop",
onclick = 'Shiny.onInputChange(\"select_button\",  this.id)'
),]
n.col <- NCOL(g.r.dt.pros)
setcolorder(g.r.dt.pros, c(n.col, 1:(n.col-1)))
g.r.dt.pros
g.r.dt.pros.count()
count(g.r.dt.pros)
NROW(g.r.dt.pros)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
